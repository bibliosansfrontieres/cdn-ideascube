---
- name: Drop a complete source.list
  copy: src=source.list dest=/etc/apt/sources.list

- name: Run apt-get update  
  shell: apt-get update ; echo
  register: result

- name: Fix broken package
  shell: dpkg --configure -a
  when: "'dpkg --configure -a' in result.stderr"

- name: Remove unwanted packages before upgrading
  apt: name={{ item }} state=absent purge=yes
  with_items:
   - apache2
   - apache2-mpm-worker
   - apache2-utils
   - apache2.2-bin
   - apache2.2-common
   - btrfs-tools
   - figlet
   - toilet
   - bluez
   - fping
   - stress
   - iperf
   - iotop
   - lirc
   - apt-listchanges
   - clipit
   - sslh

- name: Install all required package
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
   - python-pip
   - python-dev
   - python-setuptools
   - python-virtualenv
   - virtualenv
   - git
   - sudo
   - lsb-release
   - vim
   - locate
   - git
   - unzip
   - bash-completion
   - aptitude
   - ntpdate
   - fake-hwclock
   - hdparm
   - ncurses-term
   - libffi-dev
   - libssl-dev
   - tree
   - screen
   - iftop
   - iotop
   - tmux
   - mtr-tiny
   - libwww-perl
   - httpie
   - lshw
   - hwinfo
   - sqlite3
   - elinks
   - avahi-daemon
   - mosh

- name: Upgrade pip to the latest version
  pip: name=pip state=latest

- name: Stat /dev/sda1 for later use on Koombooks
  stat: path=/dev/sda1
  register: sda1

- name: Test if a fex file exist, if yes, the device is an Olimex
  stat: path=/boot/bin/lime2.bin
  register: fex_file

- name: Test if a fex file exist, if yes, the device is an Olimex
  stat: path=/boot/script.bin
  register: fex_file2

- include: lime2.yml
  when: fex_file.stat.exists is defined and fex_file.stat.exists 
    or fex_file2.stat.exists is defined and fex_file2.stat.exists

- name: List services to restart (1/2)
  shell: checkrestart | grep ^service | awk '{print $2}'
  register: services
  changed_when: False

- name: Upgrade packages
  apt: upgrade=safe

- name: Drop hosts file on device for cache_machine
  template: src=hosts_cache_machine.j2 dest=/etc/hosts
  when: firststart.stat.exists == False or firststart is undefined

- name: Give an hostname
  hostname: name={{ hostname }}

- name: Set up authorized_keys for root user
  authorized_key: user=root key="{{ item }}"
  with_file:
    - florian.pub
    - gregoire.pub
    - tom.pub
    - steven.pub

- name: Add locales
  locale_gen: name="{{ item }}" state=present
  with_items:
  - fr_FR.UTF-8
  - en_US.UTF-8
  - en_GB.UTF-8

- name: Copy .bashrc for root
  copy: src=bashrc dest=/root/.bashrc owner=root

- name: Copy the global vimrc file
  copy: src=vimrc.local dest=/etc/vim/vimrc.local owner=root mode=0644

- name: Create local directory to work from
  file: path=/var/lib/ansible/local state=directory owner=root group=root mode=0751

- name: Create ansible hosts directory to work from
  file: path=/etc/ansible/ state=directory owner=root group=root mode=0751

- name: Copy ansible inventory file to client
  copy: src=hosts dest=/etc/ansible/hosts
